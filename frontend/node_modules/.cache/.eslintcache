[{"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\index.js":"1","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reportWebVitals.js":"2","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\App.js":"3","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Header.js":"4","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Footer.js":"5","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\HomeScreen.js":"6","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Product.js":"7","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Rating.js":"8","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProductScreen.js":"9","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\store.js":"10","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\productReducers.js":"11","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\productConstants.js":"12","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\productActions.js":"13","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Message.js":"14","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Loader.js":"15","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\CartScreen.js":"16","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\cartReducers.js":"17","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\cartConstants.js":"18","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\cartActions.js":"19","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\userReducers.js":"20","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\LoginScreen.js":"21","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\FormContainer.js":"22","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\userActions.js":"23","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\userConstants.js":"24","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\RegisterScreen.js":"25","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProfileScreen.js":"26","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ShippingScreen.js":"27","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\CheckoutSteps.js":"28","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\PaymentScreen.js":"29","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\orderReducers.js":"31","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\orderConstants.js":"32","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\orderActions.js":"33","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\OrderScreen.js":"34","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\UserListScreen.js":"35","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\UserEditScreen.js":"36","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProductListScreen.js":"37","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProductEditScreen.js":"38","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\OrderListScreen.js":"39","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\SearchBox.js":"40","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Paginate.js":"41","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\ProductCarousel.js":"42"},{"size":634,"mtime":1658182144161,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1655067241809,"results":"45","hashOfConfig":"44"},{"size":2678,"mtime":1659238545118,"results":"46","hashOfConfig":"44"},{"size":2403,"mtime":1659226153370,"results":"47","hashOfConfig":"44"},{"size":366,"mtime":1655091196023,"results":"48","hashOfConfig":"44"},{"size":1505,"mtime":1659281972577,"results":"49","hashOfConfig":"44"},{"size":876,"mtime":1655661804128,"results":"50","hashOfConfig":"44"},{"size":1116,"mtime":1655580124898,"results":"51","hashOfConfig":"44"},{"size":8116,"mtime":1659225216167,"results":"52","hashOfConfig":"44"},{"size":2361,"mtime":1659281584862,"results":"53","hashOfConfig":"44"},{"size":3963,"mtime":1659281543354,"results":"54","hashOfConfig":"44"},{"size":1524,"mtime":1659201183190,"results":"55","hashOfConfig":"44"},{"size":6139,"mtime":1659281648713,"results":"56","hashOfConfig":"44"},{"size":250,"mtime":1658007940503,"results":"57","hashOfConfig":"44"},{"size":403,"mtime":1658007633497,"results":"58","hashOfConfig":"44"},{"size":3851,"mtime":1659077540577,"results":"59","hashOfConfig":"44"},{"size":1234,"mtime":1659113143092,"results":"60","hashOfConfig":"44"},{"size":282,"mtime":1658180322556,"results":"61","hashOfConfig":"44"},{"size":1367,"mtime":1659113008347,"results":"62","hashOfConfig":"44"},{"size":3765,"mtime":1659153483722,"results":"63","hashOfConfig":"44"},{"size":2359,"mtime":1659027903439,"results":"64","hashOfConfig":"44"},{"size":347,"mtime":1658966837852,"results":"65","hashOfConfig":"44"},{"size":7338,"mtime":1659193041131,"results":"66","hashOfConfig":"44"},{"size":1508,"mtime":1659067289565,"results":"67","hashOfConfig":"44"},{"size":3692,"mtime":1659063943189,"results":"68","hashOfConfig":"44"},{"size":5967,"mtime":1659134231883,"results":"69","hashOfConfig":"44"},{"size":2632,"mtime":1659077931647,"results":"70","hashOfConfig":"44"},{"size":1294,"mtime":1659077878690,"results":"71","hashOfConfig":"44"},{"size":1998,"mtime":1659112857082,"results":"72","hashOfConfig":"44"},{"size":5528,"mtime":1659127857753,"results":"73","hashOfConfig":"44"},{"size":3809,"mtime":1659218602601,"results":"74","hashOfConfig":"44"},{"size":1262,"mtime":1659120878904,"results":"75","hashOfConfig":"44"},{"size":6164,"mtime":1659218746582,"results":"76","hashOfConfig":"44"},{"size":7651,"mtime":1659390786460,"results":"77","hashOfConfig":"44"},{"size":2850,"mtime":1659194244002,"results":"78","hashOfConfig":"44"},{"size":3528,"mtime":1659193304978,"results":"79","hashOfConfig":"44"},{"size":4239,"mtime":1659238626766,"results":"80","hashOfConfig":"44"},{"size":6609,"mtime":1659212720176,"results":"81","hashOfConfig":"44"},{"size":2646,"mtime":1659214986216,"results":"82","hashOfConfig":"44"},{"size":919,"mtime":1659226773755,"results":"83","hashOfConfig":"44"},{"size":824,"mtime":1659237880201,"results":"84","hashOfConfig":"44"},{"size":1249,"mtime":1659281722499,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"3pkz02",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"89"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"89"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"89"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"89"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"89"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"89"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"89"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"89"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"89"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"89"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"89"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"89"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"89"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\index.js",[],[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reportWebVitals.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\App.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Header.js",["228"],[],"import React from 'react'\r\n\r\nimport { Route } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {Nav, Navbar, Container,NavDropdown} from 'react-bootstrap'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport SearchBox from './SearchBox'\r\nimport { logout } from '../actions/userActions'\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch()\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n  \r\n  const logoutHandler = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  return (\r\n    <header>\r\n        <Navbar bg=\"dark\" variant='dark' expand=\"lg\" collapseOnSelect>\r\n  <Container>\r\n    <LinkContainer to =  '/'>\r\n    <Navbar.Brand >Tree</Navbar.Brand>\r\n    </LinkContainer>\r\n    \r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n    <SearchBox />\r\n      <Nav className=\"ms-auto\">\r\n\r\n      <LinkContainer to =  '/cart'>\r\n      <Nav.Link ><i className='fas fa-shopping-cart'></i>   Cart</Nav.Link>\r\n      </LinkContainer>\r\n      {userInfo ? (\r\n                <NavDropdown title={userInfo.name} id='username'>\r\n                  <LinkContainer to='/profile'>\r\n                    <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <NavDropdown.Item onClick={logoutHandler}>\r\n                    Logout\r\n                  </NavDropdown.Item>\r\n                </NavDropdown>\r\n              ) : (<LinkContainer to =  '/login'>\r\n              <Nav.Link ><i className='fas fa-user'></i>   Sign in</Nav.Link>\r\n              </LinkContainer>)}\r\n\r\n              {userInfo && userInfo.isAdmin && (\r\n                <NavDropdown title='Admin' id='adminmenu'>\r\n                  <LinkContainer to='/admin/userlist'>\r\n                    <NavDropdown.Item>Users</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to='/admin/productlist'>\r\n                    <NavDropdown.Item>Products</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to='/admin/orderlist'>\r\n                    <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                </NavDropdown>\r\n              )}\r\n       \r\n \r\n       \r\n\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Container>\r\n</Navbar>\r\n        </header>\r\n  )\r\n}\r\n\r\nexport default Header","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Footer.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\HomeScreen.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Product.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Rating.js",["229"],[],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Rating = ({value,text,color}) => {\r\n  return (\r\n    <div className='rating'>\r\n       <span>\r\n        <i style ={{color:color}} className={value >=1 ? 'fas fa-star' : value >=0.5 ? 'fas fa-star-half-alt' : 'far fa-star'}></i>\r\n       </span> \r\n       <span>\r\n        <i style ={{color:color}} className={value >=2 ? 'fas fa-star' : value >=1.5 ? 'fas fa-star-half-alt' : 'far fa-star'}></i>\r\n       </span> \r\n       <span>\r\n        <i style ={{color:color}} className={value >=3 ? 'fas fa-star' : value >=2.5 ? 'fas fa-star-half-alt' : 'far fa-star'}></i>\r\n       </span> \r\n       <span>\r\n        <i style ={{color:color}} className={value >=4 ? 'fas fa-star' : value >=3.5 ? 'fas fa-star-half-alt' : 'far fa-star'}></i>\r\n       </span> \r\n       <span>\r\n        <i style ={{color:color}} className={value >=5 ? 'fas fa-star' : value >=4.5 ? 'fas fa-star-half-alt' : 'far fa-star'}></i>\r\n       </span> \r\n        <span> {text ? text : ''}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nRating.defaultProps = {\r\n    color:'#f8e825'\r\n}\r\n\r\n\r\n\r\nexport default Rating","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProductScreen.js",["230","231"],[],"\r\nimport { Row,Col,Card,Image,ListGroup,Button, Form} from 'react-bootstrap'\r\nimport React,{useState,useEffect} from 'react'\r\nimport Rating from '../components/Rating'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate } from \"react-router\"\r\nimport { useParams,Link } from 'react-router-dom'\r\nimport { listProductDetails,createProductReview, } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\r\n\r\n\r\nconst ProductScreen = ({}) => {\r\n    const [qty, setQty] = useState(1)\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const dispatch = useDispatch()\r\n    const params = useParams()\r\n\r\n    const productDetails = useSelector(state =>state.productDetails)\r\n    const {loading,error,product} = productDetails\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n  \r\n    const productReviewCreate = useSelector((state) => state.productReviewCreate)\r\n    const {\r\n      success: successProductReview,\r\n      loading: loadingProductReview,\r\n      error: errorProductReview,\r\n    } = productReviewCreate\r\n\r\n    useEffect(()=>{\r\n\r\n        if (successProductReview) {\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n          }\r\n\r\n   \r\n      dispatch(listProductDetails(params.id))\r\n     \r\n    \r\n\r\n    },[dispatch,successProductReview])\r\n\r\n    const addToCartHandler = () => {\r\n        navigate(`/cart/${params.id}?qty=${qty}`)\r\n      }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(\r\n          createProductReview(params.id, {\r\n            rating,\r\n            comment,\r\n          })\r\n        )\r\n      }\r\n    \r\n  return (\r\n    <>\r\n    <Link className = 'btn btn-dark my-3' to = '/'>Go Back</Link>\r\n    {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>) : (\r\n            <>\r\n            <Row>\r\n\r\n        <Col md={6}>\r\n        <Image src = {product.image} alt={product.name} fluid />\r\n        </Col>\r\n\r\n        <Col md={3}>\r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2>{product.name}</h2>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Rating value={product.rating} text = {`${product.numReviews} reviews`} />\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                       Price: ${product.price}   \r\n                    </ListGroup.Item>  \r\n\r\n                    <ListGroup.Item>\r\n                        Description: {product.description}\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n        </Col>\r\n        <Col md={3}>\r\n            <Card>\r\n                <ListGroup variant= 'flush'>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>\r\n                                Price:\r\n                            </Col>\r\n                            <Col>\r\n                            <strong>${product.price}</strong>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>\r\n                                Status:\r\n                            </Col>\r\n                            <Col>\r\n                            <strong>{product.countInStock >0 ? 'In Stock' : 'Out of Stock' }</strong>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    {product.countInStock > 0 && (\r\n                    <ListGroup>\r\n                        <Row>\r\n                            <Col> Qty</Col>\r\n                            <Col>\r\n                            <Form.Control as = 'select' value={qty} onChange={(e)=>setQty(e.target.value)}>\r\n                            {[...Array(product.countInStock).keys()].map(\r\n                              (x) => (\r\n                                <option key={x + 1} value={x + 1}>\r\n                                  {x + 1}\r\n                                </option>\r\n                              )\r\n                            )}\r\n                            </Form.Control>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup>\r\n                    )}\r\n                    <ListGroup.Item>\r\n                        <Button\r\n                        onClick={addToCartHandler} \r\n                        className='btn-block' type='btn' disabled = {product.countInStock ===0}>\r\n                            Add To Cart\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n        </Col>\r\n    </Row>\r\n\r\n    <Row>\r\n            <Col md={6}>\r\n              <h2>Reviews</h2>\r\n              {product.reviews.length === 0 && <Message>No Reviews</Message>}\r\n              <ListGroup variant='flush'>\r\n                {product.reviews.map((review) => (\r\n                  <ListGroup.Item key={review._id}>\r\n                    <strong>{review.name}</strong>\r\n                    <Rating value={review.rating} />\r\n                    <p>{review.createdAt.substring(0, 10)}</p>\r\n                    <p>{review.comment}</p>\r\n                  </ListGroup.Item>\r\n                ))}\r\n                <ListGroup.Item>\r\n                  <h2>Write a Customer Review</h2>\r\n                  {successProductReview && (\r\n                    <Message variant='success'>\r\n                      Review submitted successfully\r\n                    </Message>\r\n                  )}\r\n                  {loadingProductReview && <Loader />}\r\n                  {errorProductReview && (\r\n                    <Message variant='danger'>{errorProductReview}</Message>\r\n                  )}\r\n                  {userInfo ? (\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group controlId='rating'>\r\n                        <Form.Label>Rating</Form.Label>\r\n                        <Form.Control\r\n                          as='select'\r\n                          value={rating}\r\n                          onChange={(e) => setRating(e.target.value)}\r\n                        >\r\n                          <option value=''>Select...</option>\r\n                          <option value='1'>1 - Poor</option>\r\n                          <option value='2'>2 - Fair</option>\r\n                          <option value='3'>3 - Good</option>\r\n                          <option value='4'>4 - Very Good</option>\r\n                          <option value='5'>5 - Excellent</option>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group controlId='comment'>\r\n                        <Form.Label>Comment</Form.Label>\r\n                        <Form.Control\r\n                          as='textarea'\r\n                          row='3'\r\n                          value={comment}\r\n                          onChange={(e) => setComment(e.target.value)}\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Button\r\n                        disabled={loadingProductReview}\r\n                        type='submit'\r\n                        variant='primary'\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </Form>\r\n                  ) : (\r\n                    <Message>\r\n                      Please <Link to='/login'>sign in</Link> to write a review{' '}\r\n                    </Message>\r\n                  )}\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n\r\n\r\n    </>\r\n        )}\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\store.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\productReducers.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\productConstants.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\productActions.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Message.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Loader.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\CartScreen.js",["232"],[],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, Image, ListGroup, Card, Button, Form } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport { addToCart,removeFromCart } from '../actions/cartActions'\r\nimport { useParams,useLocation,Link } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst CartScreen = ({history}) => {\r\n    const params = useParams()\r\n    \r\n    const productId = params.id\r\n    const location = useLocation()\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const cart = useSelector((state) => state.cart)\r\n    const { cartItems } = cart\r\n\r\n    console.log(cartItems)\r\n\r\n    useEffect(() => {\r\n        if (productId) {\r\n          dispatch(addToCart(productId, qty))\r\n        }\r\n      }, [dispatch, productId, qty])\r\n    \r\n    const removeFromCartHandler = (id) => {\r\n        dispatch(removeFromCart(id))\r\n      }\r\n\r\n    const checkoutHandler = () => {\r\n        navigate('/shipping')\r\n      }\r\n\r\n    return (\r\n    <Row>\r\n        <Col>\r\n        <h1>Shopping Cart</h1>\r\n        {cartItems.length === 0 ? (\r\n          <Message>\r\n            Your cart is empty <Link to='/'>Go Back</Link>\r\n          </Message>\r\n        ) : (\r\n          <ListGroup variant='flush'>\r\n              {cartItems.map((item) => (\r\n              <ListGroup.Item key={item.product}>\r\n                <Row>\r\n                  <Col md={2}>\r\n                    <Image src={item.image} alt={item.name} fluid rounded />\r\n                  </Col>\r\n                  <Col md={3}>\r\n                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                  </Col>\r\n                  <Col md={2}>${item.price}</Col>\r\n                  <Col md={2}>\r\n                    <Form.Control\r\n                      as='select'\r\n                      value={item.qty}\r\n                      onChange={(e) =>\r\n                        dispatch(\r\n                          addToCart(item.product, Number(e.target.value))\r\n                        )\r\n                      }\r\n                    >\r\n                      {[...Array(item.countInStock).keys()].map((x) => (\r\n                        <option key={x + 1} value={x + 1}>\r\n                          {x + 1}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Control>\r\n                  </Col>\r\n                  <Col md={2}>\r\n                    <Button\r\n                      type='button'\r\n                      variant='light'\r\n                      onClick={() => removeFromCartHandler(item.product)}\r\n                    >\r\n                      <i className='fas fa-trash'></i>\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            ))}\r\n\r\n          </ListGroup>\r\n        )}\r\n        </Col>\r\n\r\n\r\n\r\n        <Col md={4}>\r\n        <Card>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h2>\r\n                Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\r\n                items\r\n              </h2>\r\n              $\r\n              {cartItems\r\n                .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                .toFixed(2)}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <Button\r\n                type='button'\r\n                className='btn-block'\r\n                disabled={cartItems.length === 0}\r\n                onClick={checkoutHandler}\r\n              >\r\n                Proceed To Checkout\r\n              </Button>\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default CartScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\cartReducers.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\cartConstants.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\cartActions.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\userReducers.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\LoginScreen.js",["233"],[],"import React, { useState, useEffect } from 'react'\r\nimport { useLocation,Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { login } from '../actions/userActions'\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst LoginScreen = ({}) => {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const location = useLocation()\r\n    const dispatch = useDispatch()\r\n     \r\n    let navigate = useNavigate();\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { loading, error, userInfo } = userLogin\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n          navigate(redirect)\r\n        }\r\n      }, [navigate,userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(email, password))\r\n      }\r\n\r\n  return (\r\n<FormContainer>\r\n      <h1>Sign In</h1>\r\n      {error && <Message variant='danger'>{error}</Message>}\r\n      {loading && <Loader />}\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId='email'>\r\n          <Form.Label>Email Address</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Enter email'\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='password'>\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Enter password'\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Button type='submit' variant='primary'>\r\n          Sign In\r\n        </Button>\r\n      </Form>\r\n\r\n      <Row className='py-3'>\r\n        <Col>\r\n          New Customer?{' '}\r\n          <Link to={redirect ? `/register?redirect=${redirect}` : '/register'}>\r\n            Register\r\n          </Link>\r\n        </Col>\r\n      </Row>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default LoginScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\FormContainer.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\userActions.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\userConstants.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\RegisterScreen.js",["234"],[],"import React, { useState, useEffect } from 'react'\r\nimport { useLocation,Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst RegisterScreen = ({}) => {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const location = useLocation()\r\n    const dispatch = useDispatch()\r\n     \r\n    const navigate = useNavigate();\r\n\r\n    const userRegister = useSelector((state) => state.userRegister)\r\n    const { loading, error, userInfo } = userRegister\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n          navigate(redirect)\r\n        }\r\n      }, [navigate,userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n          } else {\r\n            dispatch(register(name, email, password))\r\n          }\r\n      }\r\n\r\n      return (\r\n        <FormContainer>\r\n          <h1>Sign Up On Tree</h1>\r\n          {message && <Message variant='danger'>{message}</Message>}\r\n          {error && <Message variant='danger'>{error}</Message>}\r\n          {loading && <Loader />}\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter your name here'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter your email here'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Form.Group controlId='password'>\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Enter your password here'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Form.Group controlId='confirmPassword'>\r\n              <Form.Label>Confirm Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Confirm your password'\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Button type='submit' variant='primary'>\r\n              Join!\r\n            </Button>\r\n          </Form>\r\n    \r\n          <Row className='py-3'>\r\n            <Col>\r\n              Have an Account?{' '}\r\n              <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                Login\r\n              </Link>\r\n            </Col>\r\n          </Row>\r\n        </FormContainer>\r\n      )\r\n}\r\n\r\nexport default RegisterScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProfileScreen.js",["235","236","237","238"],[],"import React, { useState, useEffect } from 'react'\r\nimport { useLocation,Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col,Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails,updateUserProfile} from '../actions/userActions'\r\nimport { useNavigate } from 'react-router';\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nconst ProfileScreen = ({}) => {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const location = useLocation()\r\n    const dispatch = useDispatch()\r\n     \r\n    const navigate = useNavigate();\r\n\r\n    const userDetails = useSelector((state) => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector((state) => state.orderListMy)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n          navigate('/login')\r\n        } else {\r\n          if (!user.name) {\r\n            \r\n            dispatch(getUserDetails('profile'))\r\n            dispatch(listMyOrders())\r\n          } else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n          }\r\n        }\r\n      }, [dispatch, userInfo, user])\r\n\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n          } else {\r\n            dispatch(updateUserProfile({ id: user._id, name, email, password }))\r\n          }\r\n      }\r\n\r\n      return (\r\n        <Row>\r\n\r\n            <Col md={3}>\r\n            <h2>User Profile</h2>\r\n          {message && <Message variant='danger'>{message}</Message>}\r\n          {error && <Message variant='danger'>{error}</Message>}\r\n          {success && <Message variant='success'>Profile Updated</Message>}\r\n          {loading && <Loader />}\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter your name here'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter your email here'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Form.Group controlId='password'>\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Enter your password here'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Form.Group controlId='confirmPassword'>\r\n              <Form.Label>Confirm Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Confirm your password'\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n    \r\n            <Button type='submit' variant='primary'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n            </Col>\r\n\r\n            <Col md={9}>\r\n\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n          <Loader />\r\n        ) : errorOrders ? (\r\n          <Message variant='danger'>{errorOrders}</Message>\r\n        ) : (\r\n          <Table striped bordered hover responsive className='table-sm'>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td>{order._id}</td>\r\n                  <td>{order.createdAt.substring(0, 10)}</td>\r\n                  <td>{order.totalPrice}</td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <LinkContainer to={`/order/${order._id}`}>\r\n                      <Button className='btn-sm' variant='light'>\r\n                        Details\r\n                      </Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n            </Col>\r\n        </Row>\r\n\r\n\r\n      )\r\n}\r\n\r\nexport default ProfileScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ShippingScreen.js",["239"],[],"import React, { useState } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useLocation} from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst ShippingScreen = () => {\r\n    const cart = useSelector((state) => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n\r\n  const [address, setAddress] = useState(shippingAddress.address)\r\n  const [city, setCity] = useState(shippingAddress.city)\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n  const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate();\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        navigate('/payment')\r\n      }\r\n\r\n  return (\r\n    <FormContainer>\r\n        <CheckoutSteps step1 step2 />\r\n    <h1>Shipping</h1>\r\n    <Form onSubmit={submitHandler}>\r\n      <Form.Group controlId='address'>\r\n        <Form.Label>Address</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='Enter address'\r\n          value={address}\r\n          required\r\n          onChange={(e) => setAddress(e.target.value)}\r\n        ></Form.Control>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId='city'>\r\n        <Form.Label>City</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='Enter city'\r\n          value={city}\r\n          required\r\n          onChange={(e) => setCity(e.target.value)}\r\n        ></Form.Control>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId='postalCode'>\r\n        <Form.Label>Postal Code</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='Enter postal code'\r\n          value={postalCode}\r\n          required\r\n          onChange={(e) => setPostalCode(e.target.value)}\r\n        ></Form.Control>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId='country'>\r\n        <Form.Label>Country</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='Enter country'\r\n          value={country}\r\n          required\r\n          onChange={(e) => setCountry(e.target.value)}\r\n        ></Form.Control>\r\n      </Form.Group>\r\n\r\n      <Button type='submit' variant='primary'>\r\n        Continue\r\n      </Button>\r\n    </Form>\r\n  </FormContainer>\r\n  )\r\n}\r\n\r\nexport default ShippingScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\CheckoutSteps.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\PaymentScreen.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\PlaceOrderScreen.js",[],["240"],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\reducers\\orderReducers.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\constants\\orderConstants.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\actions\\orderActions.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\OrderScreen.js",["241","242"],[],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n//import { PayPalButton } from 'react-paypal-button-v2'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { Row, Col, ListGroup, Image, Card,Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useNavigate } from 'react-router'\r\nimport { getOrderDetails,payOrder,deliverOrder} from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET,ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\n\r\nconst OrderScreen = () => {\r\n    const params = useParams()\r\n    const orderId =params.id\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n    \r\n\r\n    const orderDetails = useSelector((state) => state.orderDetails)\r\n    const { order, loading, error } = orderDetails\r\n\r\n    const orderPay = useSelector((state) => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector((state) => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    if (!loading) {\r\n        //   Calculate prices\r\n        const addDecimals = (num) => {\r\n          return (Math.round(num * 100) / 100).toFixed(2)\r\n        }\r\n    \r\n        order.itemsPrice = addDecimals(\r\n          order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n        )\r\n      }\r\n\r\n  useEffect(() => {\r\n\r\n    if (!userInfo) {\r\n       navigate('/login')\r\n      }\r\n\r\n\r\n    const addPayPalScript = async () => {\r\n        const { data: clientId } = await axios.get('/api/config/paypal')\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n        script.async = true\r\n        script.onload = () => {\r\n          setSdkReady(true)\r\n        }\r\n        document.body.appendChild(script)\r\n      }\r\n\r\n\r\n      if (!order || successPay || successDeliver || order._id !== orderId) {\r\n        dispatch({ type: ORDER_PAY_RESET })\r\n        dispatch({ type: ORDER_DELIVER_RESET })\r\n        dispatch(getOrderDetails(orderId))\r\n      } else if (!order.isPaid) {\r\n        if (!window.paypal) {\r\n          addPayPalScript()\r\n        } else {\r\n          setSdkReady(true)\r\n        }\r\n      }\r\n    }, [dispatch, orderId, successPay, successDeliver, order])\r\n\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult)\r\n    dispatch(payOrder(orderId, paymentResult))\r\n  }\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order))\r\n  }\r\n\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message variant='danger'>{error}</Message>\r\n  ) : (\r\n    <>\r\n      <h1>Order {order._id}</h1> \r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong>Name: </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>{' '}\r\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n              </p>\r\n              <p>\r\n                <strong>Address:</strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city}{' '}\r\n                {order.shippingAddress.postalCode},{' '}\r\n                {order.shippingAddress.country}\r\n              </p>\r\n\r\n              {order.isDelivered ? (\r\n                <Message variant='success'>\r\n                  Delivered on {order.deliveredAt}\r\n                </Message>\r\n              ) : (\r\n                <Message variant='danger'>Not Delivered</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n            <p>\r\n                <strong>Method: </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n              {order.isPaid ? (\r\n                <Message variant='success'>Paid on {order.paidAt}</Message>\r\n              ) : (\r\n                <Message variant='danger'>Not Paid</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                    ))}\r\n                    </ListGroup>\r\n                    )}\r\n                    </ListGroup.Item>\r\n                \r\n\r\n        </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>${order.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>${order.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>${order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>${order.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                   <Button></Button>\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo &&\r\n                userInfo.isAdmin &&\r\n                order.isPaid &&\r\n                !order.isDelivered && (\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type='button'\r\n                      className='btn btn-block'\r\n                      onClick={deliverHandler}\r\n                    >\r\n                      Mark As Delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n\r\n    \r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      </>\r\n      )\r\n    \r\n\r\n    \r\n  \r\n}\r\n\r\nexport default OrderScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\UserListScreen.js",["243"],[],"import React, { useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listUsers,deleteUser } from '../actions/userActions'\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst UserListScreen = () => {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate();\r\n\r\n    const userList = useSelector((state) => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector((state) => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n          } else {\r\n            navigate('/login')\r\n          }\r\n      }, [dispatch,successDelete,userInfo])\r\n\r\n    const deleteHandler = (id) => {\r\n        if (window.confirm('Are you sure you want to delete?')) {\r\n          dispatch(deleteUser(id))\r\n        }\r\n      }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <h1>Users</h1>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : error ? (\r\n      <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n      <Table striped bordered hover responsive className='table-sm'>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>NAME</th>\r\n            <th>EMAIL</th>\r\n            <th>ADMIN</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user) => (\r\n            <tr key={user._id}>\r\n              <td>{user._id}</td>\r\n              <td>{user.name}</td>\r\n              <td>\r\n                <a href={`mailto:${user.email}`}>{user.email}</a>\r\n              </td>\r\n              <td>\r\n                {user.isAdmin ? (\r\n                  <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                ) : (\r\n                  <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                )}\r\n              </td>\r\n              <td>\r\n                <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                  <Button variant='light' className='btn-sm'>\r\n                    <i className='fas fa-edit'></i>\r\n                  </Button>\r\n                </LinkContainer>\r\n                <Button\r\n                  variant='danger'\r\n                  className='btn-sm'\r\n                  onClick={() => deleteHandler(user._id)}\r\n                >\r\n                  <i className='fas fa-trash'></i>\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    )}\r\n  </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\UserEditScreen.js",["244","245"],[],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router';\r\n\r\n\r\nconst UserEditScreen = ({}) => {\r\n    const params = useParams()\r\n\r\n    const userId = params.id\r\n    const navigate = useNavigate();\r\n  \r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n  \r\n    const dispatch = useDispatch()\r\n  \r\n    const userDetails = useSelector((state) => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userUpdate = useSelector((state) => state.userUpdate)\r\n    const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n    } = userUpdate\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (successUpdate) {\r\n        dispatch({ type: USER_UPDATE_RESET })\r\n        navigate('/admin/userlist')\r\n      } else {\r\n        if (!user.name || user._id !== userId) {\r\n          dispatch(getUserDetails(userId))\r\n        } else {\r\n          setName(user.name)\r\n          setEmail(user.email)\r\n          setIsAdmin(user.isAdmin)\r\n        }\r\n      }\r\n    }, [dispatch, userId, user, successUpdate])\r\n  \r\n    const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n    }\r\n  \r\n    return (\r\n      <>\r\n        <Link to='/admin/userlist' className='btn btn-light my-3'>\r\n          Go Back\r\n        </Link>\r\n        <FormContainer>\r\n          <h1>Edit User</h1>\r\n          {loadingUpdate && <Loader />}\r\n          {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Message variant='danger'>{error}</Message>\r\n          ) : (\r\n            <Form onSubmit={submitHandler}>\r\n              <Form.Group controlId='name'>\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n  \r\n              <Form.Group controlId='email'>\r\n                <Form.Label>Email Address</Form.Label>\r\n                <Form.Control\r\n                  type='email'\r\n                  placeholder='Enter email'\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n  \r\n              <Form.Group controlId='isadmin'>\r\n                <Form.Check\r\n                  type='checkbox'\r\n                  label='Is Admin'\r\n                  checked={isAdmin}\r\n                  onChange={(e) => setIsAdmin(e.target.checked)}\r\n                ></Form.Check>\r\n              </Form.Group>\r\n  \r\n              <Button type='submit' variant='primary'>\r\n                Update\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </FormContainer>\r\n      </>\r\n    )\r\n}\r\nexport default UserEditScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProductListScreen.js",["246"],[],"import React, { useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport Paginate from '../components/Paginate'\r\nimport { useNavigate,useParams } from 'react-router';\r\nimport { listProducts,deleteProduct,createProduct} from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\n\r\nconst ProductListScreen = () => {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const params = useParams()\r\n\r\n    const pageNumber = params.pageNumber || 1\r\n\r\n    const productList = useSelector((state) => state.productList)\r\n    const { loading, error, products,page,pages } = productList\r\n\r\n    const productDelete = useSelector((state) => state.productDelete)\r\n    const {\r\n      loading: loadingDelete,\r\n      error: errorDelete,\r\n      success: successDelete,\r\n    } = productDelete\r\n\r\n    const productCreate = useSelector((state) => state.productCreate)\r\n    const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo || !userInfo.isAdmin) {\r\n            navigate('/login')\r\n          }\r\n\r\n        if (successCreate) {\r\n            navigate(`/admin/product/${createdProduct._id}/edit`)\r\n          } else {\r\n             dispatch(listProducts('',pageNumber))\r\n          }\r\n\r\n         \r\n      }, [dispatch,userInfo,successDelete,successCreate,\r\n        createdProduct,pageNumber])\r\n\r\n    const deleteHandler = (id) => {\r\n        if (window.confirm('Are you sure you want to delete?')) {\r\n          dispatch(deleteProduct(id))\r\n        }\r\n      }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n      }\r\n\r\n  return (\r\n    <>\r\n    <Row className='align-items-center'>\r\n        <Col>\r\n          <h1>Products</h1>\r\n        </Col>\r\n        <Col className='text-right'>\r\n          <Button className='my-3' onClick={createProductHandler}>\r\n            <i className='fas fa-plus'></i> Create Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    {loadingDelete && <Loader />}\r\n    {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n    {loadingCreate && <Loader />}\r\n    {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n    {loading ? (\r\n      <Loader />\r\n    ) : error ? (\r\n      <Message variant='danger'>{error}</Message>\r\n    ) : (<>\r\n      <Table striped bordered hover responsive className='table-sm'>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>NAME</th>\r\n            <th>PRICE</th>\r\n            <th>CATEGORY</th>\r\n            <th>BRAND</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n              {products.map((product) => (\r\n                <tr key={product._id}>\r\n                  <td>{product._id}</td>\r\n                  <td>{product.name}</td>\r\n                  <td>${product.price}</td>\r\n                  <td>{product.category}</td>\r\n                  <td>{product.brand}</td>\r\n                  <td>\r\n                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                      <Button variant='light' className='btn-sm'>\r\n                        <i className='fas fa-edit'></i>\r\n                      </Button>\r\n                    </LinkContainer>\r\n                    <Button\r\n                      variant='danger'\r\n                      className='btn-sm'\r\n                      onClick={() => deleteHandler(product._id)}\r\n                    >\r\n                      <i className='fas fa-trash'></i>\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n      </Table>\r\n      <Paginate pages={pages} page={page} isAdmin={true} />\r\n      </>\r\n    )}\r\n  </>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\ProductEditScreen.js",["247","248"],[],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router';\r\nimport axios from 'axios'\r\n\r\nconst ProductEditScreen = ({}) => {\r\n    const params = useParams()\r\n    const productId = params.id\r\n\r\n\r\n    const navigate = useNavigate();\r\n  \r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [image, setImage] = useState('')\r\n    const [brand, setBrand] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [countInStock, setCountInStock] = useState(0)\r\n    const [description, setDescription] = useState('')\r\n    const [uploading, setUploading] = useState(false)\r\n  \r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector((state) => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    const productUpdate = useSelector((state) => state.productUpdate)\r\n    const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n  \r\n  \r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: PRODUCT_UPDATE_RESET })\r\n            navigate('/admin/productlist')\r\n          } else {\r\n        if (!product.name || product._id !== productId) {\r\n            dispatch(listProductDetails(productId))\r\n          } else {\r\n            setName(product.name)\r\n            setPrice(product.price)\r\n            setImage(product.image)\r\n            setBrand(product.brand)\r\n            setCategory(product.category)\r\n            setCountInStock(product.countInStock)\r\n            setDescription(product.description)\r\n          }\r\n        }\r\n    }, [dispatch,productId, product,successUpdate])\r\n  \r\n    const uploadFileHandler = async (e) => {\r\n        const file = e.target.files[0]\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n        setUploading(true)\r\n    \r\n        try {\r\n          const config = {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          }\r\n    \r\n          const { data } = await axios.post('/api/upload', formData, config)\r\n    \r\n          setImage(data)\r\n          setUploading(false)\r\n        } catch (error) {\r\n          console.error(error)\r\n          setUploading(false)\r\n        }\r\n      }\r\n\r\n\r\n    const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(\r\n        updateProduct({\r\n          _id: productId,\r\n          name,\r\n          price,\r\n          image,\r\n          brand,\r\n          category,\r\n          description,\r\n          countInStock,\r\n        })\r\n      )\r\n    }\r\n  \r\n    return (\r\n      <>\r\n         <Link to='/admin/productlist' className='btn btn-light my-3'>\r\n          Go Back\r\n        </Link>\r\n        <FormContainer>\r\n        <h1>Edit Product</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n          {loading ? (\r\n            <Loader />\r\n          ) : error ? (\r\n            <Message variant='danger'>{error}</Message>\r\n          ) : (\r\n            <Form onSubmit={submitHandler}>\r\n              <Form.Group controlId='name'>\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control\r\n                  type='name'\r\n                  placeholder='Enter name'\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n  \r\n              <Form.Group controlId='price'>\r\n              <Form.Label>Price</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter price'\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='image'>\r\n              <Form.Label>Image</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter image url'\r\n                value={image}\r\n                onChange={(e) => setImage(e.target.value)}\r\n              ></Form.Control>\r\n                <Form.Control \r\n                    type=\"file\"\r\n                id='image-file'\r\n                label='Choose File'\r\n                custom\r\n                onChange={uploadFileHandler}\r\n              ></Form.Control>\r\n              {uploading && <Loader />}\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='brand'>\r\n              <Form.Label>Brand</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter brand'\r\n                value={brand}\r\n                onChange={(e) => setBrand(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='countInStock'>\r\n              <Form.Label>Count In Stock</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter countInStock'\r\n                value={countInStock}\r\n                onChange={(e) => setCountInStock(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='category'>\r\n              <Form.Label>Category</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter category'\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='description'>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter description'\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n  \r\n              <Button type='submit' variant='primary'>\r\n                Update\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </FormContainer>\r\n      </>\r\n    )\r\n}\r\nexport default ProductEditScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\screens\\OrderListScreen.js",["249"],[],"import React, { useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listOrders } from '../actions/orderActions'\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst OrderListScreen = () => {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate();\r\n\r\n    const orderList = useSelector((state) => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n          dispatch(listOrders())\r\n        } else {\r\n          navigate('/login')\r\n        }\r\n      }, [dispatch, userInfo])\r\n    \r\n\r\n\r\n  return (\r\n    <>\r\n    <h1>Orders</h1>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : error ? (\r\n      <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n      <Table striped bordered hover responsive className='table-sm'>\r\n       <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>USER</th>\r\n              <th>DATE</th>\r\n              <th>TOTAL</th>\r\n              <th>PAID</th>\r\n              <th>DELIVERED</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {orders.map((order) => (\r\n              <tr key={order._id}>\r\n                <td>{order._id}</td>\r\n                <td>{order.user && order.user.name}</td>\r\n                <td>{order.createdAt.substring(0, 10)}</td>\r\n                <td>${order.totalPrice}</td>\r\n                <td>\r\n                  {order.isPaid ? (\r\n                    order.paidAt.substring(0, 10)\r\n                  ) : (\r\n                    <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {order.isDelivered ? (\r\n                    order.deliveredAt.substring(0, 10)\r\n                  ) : (\r\n                    <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  <LinkContainer to={`/order/${order._id}`}>\r\n                    <Button variant='light' className='btn-sm'>\r\n                      Details\r\n                    </Button>\r\n                  </LinkContainer>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n      </Table>\r\n    )}\r\n  </>\r\n  )\r\n}\r\n\r\nexport default OrderListScreen","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\SearchBox.js",["250"],[],"import React, { useState } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst SearchBox = ({  }) => {\r\n    const [keyword, setKeyword] = useState('')\r\n    const navigate = useNavigate()\r\n  \r\n    const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      if (keyword.trim()) {\r\n        navigate(`/search/${keyword}`)\r\n      } else {\r\n        navigate('/')\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <Form onSubmit={submitHandler} className='d-flex'>\r\n        <Form.Control\r\n          type='text'\r\n          name='q'\r\n          onChange={(e) => setKeyword(e.target.value)}\r\n          placeholder='Search Products...'\r\n          className='mr-sm-2 ml-sm-5'\r\n        ></Form.Control>\r\n        <Button type='submit' variant='outline-success' className='p-2'>\r\n          Search\r\n        </Button>\r\n      </Form>\r\n    )\r\n  }\r\n  \r\n  export default SearchBox","D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\Paginate.js",[],[],"D:\\UCLA+USC\\2022 Summer USC\\mern\\frontend\\src\\components\\ProductCarousel.js",[],[],{"ruleId":"251","severity":1,"message":"252","line":3,"column":10,"nodeType":"253","messageId":"254","endLine":3,"endColumn":15},{"ruleId":"251","severity":1,"message":"255","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"256","severity":1,"message":"257","line":14,"column":24,"nodeType":"258","messageId":"259","endLine":14,"endColumn":26},{"ruleId":"260","severity":1,"message":"261","line":50,"column":7,"nodeType":"262","endLine":50,"endColumn":38,"suggestions":"263"},{"ruleId":"251","severity":1,"message":"264","line":1,"column":17,"nodeType":"253","messageId":"254","endLine":1,"endColumn":25},{"ruleId":"256","severity":1,"message":"257","line":11,"column":22,"nodeType":"258","messageId":"259","endLine":11,"endColumn":24},{"ruleId":"256","severity":1,"message":"257","line":11,"column":25,"nodeType":"258","messageId":"259","endLine":11,"endColumn":27},{"ruleId":"251","severity":1,"message":"265","line":2,"column":22,"nodeType":"253","messageId":"254","endLine":2,"endColumn":26},{"ruleId":"256","severity":1,"message":"257","line":12,"column":24,"nodeType":"258","messageId":"259","endLine":12,"endColumn":26},{"ruleId":"251","severity":1,"message":"266","line":19,"column":11,"nodeType":"253","messageId":"254","endLine":19,"endColumn":19},{"ruleId":"260","severity":1,"message":"267","line":49,"column":10,"nodeType":"262","endLine":49,"endColumn":36,"suggestions":"268"},{"ruleId":"251","severity":1,"message":"269","line":3,"column":10,"nodeType":"253","messageId":"254","endLine":3,"endColumn":21},{"ruleId":"260","severity":1,"message":"270","line":44,"column":6,"nodeType":"262","endLine":44,"endColumn":15,"suggestions":"271","suppressions":"272"},{"ruleId":"260","severity":1,"message":"273","line":77,"column":8,"nodeType":"262","endLine":77,"endColumn":62,"suggestions":"274"},{"ruleId":"251","severity":1,"message":"275","line":80,"column":9,"nodeType":"253","messageId":"254","endLine":80,"endColumn":30},{"ruleId":"260","severity":1,"message":"267","line":29,"column":10,"nodeType":"262","endLine":29,"endColumn":43,"suggestions":"276"},{"ruleId":"256","severity":1,"message":"257","line":14,"column":25,"nodeType":"258","messageId":"259","endLine":14,"endColumn":27},{"ruleId":"260","severity":1,"message":"267","line":50,"column":8,"nodeType":"262","endLine":50,"endColumn":47,"suggestions":"277"},{"ruleId":"260","severity":1,"message":"267","line":57,"column":10,"nodeType":"262","endLine":58,"endColumn":35,"suggestions":"278"},{"ruleId":"256","severity":1,"message":"257","line":14,"column":28,"nodeType":"258","messageId":"259","endLine":14,"endColumn":30},{"ruleId":"260","severity":1,"message":"267","line":60,"column":8,"nodeType":"262","endLine":60,"endColumn":51,"suggestions":"279"},{"ruleId":"260","severity":1,"message":"267","line":26,"column":10,"nodeType":"262","endLine":26,"endColumn":30,"suggestions":"280"},{"ruleId":"256","severity":1,"message":"257","line":5,"column":20,"nodeType":"258","messageId":"259","endLine":5,"endColumn":24},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["281"],"'useState' is defined but never used.","'Link' is defined but never used.","'location' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["282"],"'useLocation' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'navigate', and 'order._id'. Either include them or remove the dependency array.",["283"],["284"],"React Hook useEffect has missing dependencies: 'navigate' and 'userInfo'. Either include them or remove the dependency array.",["285"],"'successPaymentHandler' is assigned a value but never used.",["286"],["287"],["288"],["289"],["290"],{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"kind":"297","justification":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},"Update the dependencies array to be: [dispatch, params.id, successProductReview]",{"range":"311","text":"312"},"Update the dependencies array to be: [dispatch, userInfo, user, navigate]",{"range":"313","text":"314"},"Update the dependencies array to be: [dispatch, navigate, order._id, success]",{"range":"315","text":"316"},"directive","","Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, navigate]",{"range":"317","text":"318"},"Update the dependencies array to be: [dispatch, navigate, successDelete, userInfo]",{"range":"319","text":"320"},"Update the dependencies array to be: [dispatch, userId, user, successUpdate, navigate]",{"range":"321","text":"322"},"Update the dependencies array to be: [dispatch, userInfo, successDelete, successCreate, createdProduct, pageNumber, navigate]",{"range":"323","text":"324"},"Update the dependencies array to be: [dispatch, productId, product, successUpdate, navigate]",{"range":"325","text":"326"},"Update the dependencies array to be: [dispatch, navigate, userInfo]",{"range":"327","text":"328"},[1577,1608],"[dispatch, params.id, successProductReview]",[1788,1814],"[dispatch, userInfo, user, navigate]",[1568,1577],"[dispatch, navigate, order._id, success]",[2580,2634],"[dispatch, orderId, successPay, successDeliver, order, userInfo, navigate]",[1015,1048],"[dispatch, navigate, successDelete, userInfo]",[1586,1625],"[dispatch, userId, user, successUpdate, navigate]",[1785,1868],"[dispatch, userInfo, successDelete, successCreate, createdProduct, pageNumber, navigate]",[2141,2184],"[dispatch, productId, product, successUpdate, navigate]",[886,906],"[dispatch, navigate, userInfo]"]